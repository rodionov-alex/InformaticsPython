"""
На производстве штучных изделий N деталей должны быть отшлифованы и окрашены. Для каждой детали известно время
её шлифовки и время окрашивания. Детали пронумерованы начиная с единицы. Параллельная обработка деталей не
предусмотрена. На ленте транспортёра имеется N мест для каждой из N деталей. На ленте транспортёра детали
располагают по следующему алгоритму:
– все 2N чисел, обозначающих время окрашивания и шлифовки для N деталей, упорядочивают по возрастанию;
– если минимальное число в этом упорядоченном списке – это время шлифовки конкретной детали, то деталь размещают
на ленте транспортёра на первое свободное место от её начала;
– если минимальное число – это время окрашивания, то деталь размещают на первое свободное место от конца ленты
транспортёра
– если число обозначает время окрашивания или шлифовки уже рассмотренной детали, то его не принимают во внимание.
Этот алгоритм применяется последовательно для размещения всех N деталей. Определите номер последней детали, для
которой будет определено её место на ленте транспортёра, и количество деталей, которые будут отшлифованы до неё.
Входные данные представлены в файле 26-129.txt следующим образом. Первая строка входного файла содержит натуральное
число N (1 ≤ N ≤ 1000) – количество деталей. Следующие N строк содержат пары чисел, обозначающих соответственно
время шлифовки и время окрашивания конкретной детали (все числа натуральные, различные).
Запишите в ответе два натуральных числа: сначала номер последней детали, для которой будет определено её место
на ленте транспортёра, затем количество деталей, которые будут отшлифованы до неё.
Пример входного файла:
5
30 50
100 155
150 170
10 160
120 55
При таких исходных данных порядок расположения деталей на ленте транспортёра следующий: 4, 1, 2, 3, 5.
Последней займёт своё место на ленте транспортёра деталь 3. При этом до неё будут отшлифованы три детали. Ответ: 3 3.

Ответ: 895 488
"""

with open('Files/26-129.txt') as f:
    n = int(f.readline())
    data = [tuple(map(int, x.split())) for x in f]
    transporter = set()  # детали на транспортере
    operations = []      # список операций
    grinded = 0          # количество отшлифованных деталей
    last_oper = 0        # последняя операция

    # Заполнение списка операций
    for i in range(len(data)):
        grind, paint = data[i]
        operations.append((grind, 1, i + 1))
        operations.append((paint, 2, i + 1))

    # Все 2N чисел, обозначающих время окрашивания и шлифовки для N деталей, упорядочивают по возрастанию
    operations.sort()

    # По большому счету нам не важно где на транспортере располагается деталь, важно лишь ее наличие
    while len(transporter) < n:
        oper = operations.pop(0)

        # Если детали с таким номером на транспортере нет
        if oper[2] not in transporter:
            transporter.add(oper[2])  # добавить на транспортер номер детали
            last_oper = oper          # запомнить последнюю операцию
            # Если операция шлифовки, то увеличить счетчик grinded
            if oper[1] == 1:
                grinded += 1

    # Вывод номера последней операции и количество отшлифованных деталей до нее
    # Если последняя операция - шлифовка, то от счетчика grinded нужно отнять 1
    print(last_oper[2], grinded - (1 if last_oper[1] == 1 else 0))
