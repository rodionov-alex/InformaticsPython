"""
В волшебной стране живут гномы, которые любят варить зелья в магических котлах. Они имеют очень тонкую
душевную организацию и стесняются стоять рядом с кем-то за соседним котлом. Гном всегда выбирает свободный
котел с наименьшим номером, рядом с которым никто не стоит. Если это невозможно, но свободные котлы есть,
гном выбирает свободный котел с наименьшим номером. Гном варит свою порцию зелья 6 минут, после чего уходит
с поляны. В котле, который он освободил, другой гном сразу же может варить своё зелье.
Определите минимальное количество котлов, которых достаточно для того, чтобы каждый желающий гном сварил
зелье, и количество гномов, которые не испытают неудобств, связанных с близким соседством при найденном
количестве котлов. Считается, что гном испытывает неудобства, если при варке зелья стоит плечом к плечу
с соседом хотя бы 1 минуту.
Входные данные представлены в файле 26-127.txt следующим образом. Первая строка входного файла содержит
натуральное число N (1 ≤ N ≤ 10000) – количество гномов, желающих сварить зелье. В каждой из следующих
N строк записано время в минутах от начала суток, когда гном подошел к поляне с котлами – натуральное
число, не превышающее 1433. Строки в файле (кроме первой) расположены в случайном порядке.
В ответе запишите два числа: минимальное количество котлов, которых достаточно для того, чтобы каждый
желающий гном сварил зелье, и количество гномов, которые не испытают неудобств, связанных с близким
соседством при найденном количестве котлов.
Пример входного файла:
10
6
8
10
14
20
22
При таких исходных данных необходимо 3 котла. Зелье без неудобств смогут сварить два гнома, пришедших
через 20 и 22 минуты после полуночи. Распределение котлов: 1 котёл: 6-12, 14-20, 20-26; 2 котёл: 10-16;
3 котёл: 8-14, 22-28. Ответ: 3 2.

Ответ: 38 2460
"""

with open('Files/26-127.txt') as f:
    n = int(f.readline())
    gnomes = sorted([int(x) for x in f])
    timeline = [0] * 1440

    # Определим максимальное число гномов, которое могло находиться в любой момент времени
    for d in gnomes:
        # Заполним минуты таймлайна по количеству гномов в определенный момент времени
        for i in range(d, d + 6):
            timeline[i] += 1

    boiler_count = max(timeline)            # максимальное число гномов на таймлайне = минимальное количество котлов
    free_boiler = (0, 0)                    # значение свободного котла
    boilers = [free_boiler] * boiler_count  # список котлов
    pleased_gnomes = 0                      # количество довольных гномов

    # Распределение гномов по котлам в течение суток
    for t in range(0, 1440):
        # Освободить котлы
        for i in range(boiler_count):
            if boilers[i][0] == t:
                pleased_gnomes += boilers[i][1]
                boilers[i] = free_boiler
        # Занять котлы
        while len(gnomes) and gnomes[0] == t:
            # Время завершения варки
            gnome = gnomes.pop(0) + 6
            # Поиск свободного котла без соседей
            i = 0
            while i < boiler_count:
                if boilers[i] == free_boiler:
                    no_neighbours = (i > 0 and boilers[i - 1] == free_boiler or i == 0) and\
                                    (i + 1 < boiler_count and boilers[i + 1] == free_boiler or i + 1 == boiler_count)
                    # Если по соседству котлы не заняты, то выбрать этот котел
                    if no_neighbours:
                        # Котел занимает довольный гном
                        boilers[i] = (gnome, 1)
                        break
                # Инкремент индекса
                i += 1
            # Комфортный котел так и не был найден, придется занять в первый свободный
            else:
                # Индекс первого свободного котла
                ind = boilers.index(free_boiler)
                # Занять котел недовольным гномом
                boilers[ind] = (gnome, 0)
                # Если соседний слева котел занят, то занимающий его гном тоже станет недовольным
                if ind > 0:
                    boilers[ind - 1] = (boilers[ind - 1][0], 0)
                # Если соседний справа котел занят, то занимающий его гном тоже станет недовольным
                if ind + 1 < boiler_count:
                    boilers[ind + 1] = (boilers[ind + 1][0], 0)

    # Вывод необходимого числа котлов и количества довольных гномов
    print(boiler_count, pleased_gnomes)
