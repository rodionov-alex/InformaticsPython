f = open("24_5.txt")
line = f.readline()
f.close()

linelen = len(line)  # Длина строки
max_chain_len = 0    # Максимальная длина цепочки
comb = 'KEGE'        # Комбинация для поиска
comb_count = 0       # Текущее количество комбинаций в цепочке
max_comb_count = 2   # Максимальное количество комбинаций допустимое в цепочке
chain_links = []     # Длины звеньев цепочки

# Перебор всех символов в строке
for i in range(linelen - (len(comb) - 1)):
    # Сравнение среза строки с комбинацией
    if line[i:i + len(comb)] == comb:
        comb_count += 1  # Инкремент количества комбинаций

    # Текущее количество комбинаций больше максимально-допустимого.
    # Проводится проверка текущей цепочки на максимум и сдвиг звеньев для поиска следующей цепочки.
    if comb_count > max_comb_count:
        # Текущая длина цепочки равна сумме длинн всех звеньев и еще плюс длина комбинации - 1
        cur_chain_len = sum(chain_links) + (len(comb) - 1)

        # Сравнение с длиной самой длинной цепочки
        if max_chain_len < cur_chain_len:
            max_chain_len = cur_chain_len

        # Сброс текущего количества комбинаций до максимального и сдвиг звеньев
        comb_count = max_comb_count

        chain_links.pop(0)      # Удалить первое звено чтобы все остальные звенья сдвинулись влево
        chain_links[0] -= 1     # У нового первого звена отнять единицу, т.к. комбинация была его частью
        chain_links.append(1)   # Добавить последнее звено длиной 1 (текущий символ)

    # Если количество комбинаций <= максимально-допустимого, то считается длина этих звеньев
    else:
        # Добавить необходимое количество звеньев
        while comb_count >= len(chain_links):
            chain_links.append(0)

        # Увеличить длину звена на 1
        chain_links[comb_count] += 1

        # Если это последняя итерация цикла, то нужно к длине последнего звена добавить len(comb) - 1
        if i == linelen - (len(comb) - 1) - 1:
            chain_links[comb_count] += len(comb) - 1

# Длина последней цепочки равна сумме всех звеньев и еще плюс длина комбинации - 1
cur_chain_len = sum(chain_links) + (len(comb) - 1)

# Сравнение с длиной самой длинной цепочки
if max_chain_len < cur_chain_len:
    max_chain_len = cur_chain_len

# Вывод результата
print(max_chain_len)
