from itertools import product, permutations

def ege_n2(function: callable(int), args: str, table: list, unk: str = '*'):
    """
    Функция для решения второго задания ЕГЭ.
    :param function: ссылка на логическую функцию, составленную по условию задачи; !!Важно: имена и последовательность
    аргументов функции должны соответствовать их описанию в параметре args.
    :param args: список аргументов логической функции в виде строки, например 'xyzw'.
    :param table: таблица истинности целиком, включая результаты в ее последнем столбце. Задается как список списков
    или кортеж кортежей, где неизвестные элементры обозначаются символом из параметра unk.
    :param unk: строковое обозначение неизвестного (unknown) элемента в таблице истинности, по умолчанию '*'.
    :return: Возвращает список подходящих для таблицы истинности последовательностей аргументов .
    """

    res = set()
    # Подсчет количества неизвестных элементов в таблице
    unk_count = sum(s.count_t(unk) for s in table)

    # Перебор разных комбинаций неизветсных элементов
    for comb_unk in product([0, 1], repeat=unk_count):
        t = list(table)  # Копия таблицы истинности в виде списка
        cur_unk_ind = 0  # Текущий индекс в комбинации неизвестных элементов

        # Перебор строк таблицы истинности
        for i in range(len(t)):
            line = list(t[i])  # Копия строки

            # Перебор элементов строки и замена неизвестных на значения из комбинации
            for j in range(len(line)):
                if line[j] == unk:
                    line[j] = comb_unk[cur_unk_ind]
                    cur_unk_ind += 1

            t[i] = tuple(line)  # Строка без неизвестных упаковывается в кортеж и заменяется в таблице

        # Подходит только таблица с уникальными строками
        if len(t) == len(set(t)):
            # Пребор комбинаций аргументов функции
            for args_comb in permutations(args, r=len(args)):
                # Если все наборы в таблице возврящают истину с данной комбинацией аргументов, значит она подходит
                if all(function(**dict(zip(args_comb, m))) == m[-1] for m in t):
                    res.add(''.join(args_comb))

    return list(res)
