# Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди,
# первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) два камня или увеличить
# количество камней в куче в два раза. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество
# камней. Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 231.
# Победителем считается игрок, сделавший последний ход, т.е. первым получивший такую позицию, при которой в кучах
# будет 231 или больше камней.
#
# В начальный момент в первой куче было 17 камней, во второй куче – S камней; 1 ≤ S ≤ 213.
#
# Ответьте на следующие вопросы:
#   Вопрос 1. Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное
#   значение S, когда такая ситуация возможна.
#
#   Вопрос 2. Найдите наибольшее и наименьшее значения S, при которых у Пети есть выигрышная стратегия, причём
#   одновременно выполняются два условия:
#       − Петя не может выиграть за один ход;
#       − Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
#   Найденные значения запишите в ответе в порядке возрастания.
#
#   Вопрос 3. Найдите минимальное значение S, при котором одновременно выполняются два условия:
#       – у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
#       – у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
#
# Ответ: 211
#        53 105
#        96

# +2, *2
# win >= 231
# (17, s)
# 1 <= s <= 213

# region N19
def f19(a, b, p):
    if a + b >= 231 or p > 2:
        return p == 2

    return f19(a + 2, b, p + 1) or f19(a, b + 2, p + 1) or f19(a * 2, b, p + 1) or f19(a, b * 2, p + 1)

res19 = []

for s in range(1, 214):
    if f19(17, s, 0):
        res19.append(s)

print(max(res19))
# endregion

# region N20
def f20(a, b, p):
    if a + b >= 231 or p > 3:
        return p == 3

    if p % 2 == 0:
        return f20(a + 2, b, p + 1) or f20(a, b + 2, p + 1) or f20(a * 2, b, p + 1) or f20(a, b * 2, p + 1)
    else:
        return f20(a + 2, b, p + 1) and f20(a, b + 2, p + 1) and f20(a * 2, b, p + 1) and f20(a, b * 2, p + 1)

res20 = []

for s in range(1, 214):
    if f20(17, s, 0):
        res20.append(s)

print(min(res20), max(res20))

# endregion

# region N21
def f21(a, b, p):
    if a + b >= 231 or p > 4:
        return p == 2 or p == 4

    if p % 2:
        return f21(a + 2, b, p + 1) or f21(a, b + 2, p + 1) or f21(a * 2, b, p + 1) or f21(a, b * 2, p + 1)
    else:
        return f21(a + 2, b, p + 1) and f21(a, b + 2, p + 1) and f21(a * 2, b, p + 1) and f21(a, b * 2, p + 1)

res21 = []

for s in range(1, 214):
    if f21(17, s, 0):
        res21.append(s)

print(min(res21))
# endregion

print()

# region cache method
from functools import lru_cache


def moves(h):
    a, b = h
    return (a + 2, b), (a, b + 2), (a * 2, b), (a, b * 2)


@lru_cache(None)
def game(h):
    if sum(h) >= 231:
        return 'w'
    if any(game(m) == 'w' for m in moves(h)):
        return 'p1'
    if all(game(m) == 'p1' for m in moves(h)):  # для 19 (неудачный ход) задания поставить any и переместить перед p1
        return 'v1'
    if any(game(m) == 'v1' for m in moves(h)):
        return 'p2'
    if all(game(m) == 'p1' or game(m) == 'p2' for m in moves(h)):
        return 'v2'


for s in range(1, 214):
    res = game((17, s))

    if res is not None:
        print(s, res)
# endregion

print()

# region kabanov mothod
def f(a, b, c, m):
    if a + b >= 231:
        return c % 2 == m % 2
    if c == m:
        return 0
    h = [f(a + 2, b, c + 1, m), f(a, b + 2, c + 1, m), f(a * 2, b, c + 1, m), f(a, b * 2, c + 1, m)]
    return any(h) if (c + 1) % 2 == m % 2 else all(h)  # для 19 задания (неудачны ход) меняем all на any


for s in range(1, 214):
    for m in range(1, 5):
        if f(17, s, 0, m) == 1:
            # if m == 2: # добавить проверку для 19 задания (неудачны ход)
            print(s, m)
            break
# endregion
