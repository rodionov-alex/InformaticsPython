# Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по
# очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один
# камень или увеличить количество камней в куче в два раза. Для того чтобы делать ходы, у каждого игрока есть
# неограниченное количество камней. Игра завершается в тот момент, когда суммарное количество камней в кучах
# становится не менее 259. Победителем считается игрок, сделавший последний ход, т.е. первым получивший такую
# позицию, при которой в кучах будет 259 или больше камней. В начальный момент в первой куче было 17 камней,
# во второй куче – S камней; 1 ≤ S ≤ 241.
#
# Ответьте на следующие вопросы:
#   Вопрос 1. Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное
#   значение S, когда такая ситуация возможна.
#
#   Вопрос 2. Найдите два наименьших значения S, при которых у Пети есть выигрышная стратегия, причём одновременно
#   выполняются два условия:
#   − Петя не может выиграть за один ход;
#   − Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
#   Найденные значения запишите в ответе в порядке возрастания.
#
#   Вопрос 3. Найдите минимальное значение S, при котором одновременно выполняются два условия:
#   – у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
#   – у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
#
# Ответ: 61
#        112 120
#        111

# +1, *2
# win >= 259
# (17, s)
# 1 <= s <= 241

from functools import lru_cache


def moves(k):
    a, b = k
    return (a + 1, b), (a, b + 1), (a * 2, b), (a, b * 2)


@lru_cache(None)
def game(h):
    if sum(h) >= 259:
        return 'w'
    if any(game(m) == 'w' for m in moves(h)):
        return 'p1'
    if any(game(m) == 'p1' for m in moves(h)):
        return 'v1'
    if any(game(m) == 'v1' for m in moves(h)):
        return 'p2'
    if all(game(m) == 'p1' or game(m) == 'p2' for m in moves(h)):
        return 'v2'


for s in range(1, 242):
    if game((17, s)) is not None:
        print(s, game((17, s)))