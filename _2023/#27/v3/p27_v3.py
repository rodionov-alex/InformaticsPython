# На кольцевой автодороге с двусторонним движением находится N многоэтажных жилых домов (не более одного дома на
# каждом километре дороги). Длина кольцевой автодороги равна К км. Нулевой километр и K-й километр находятся в
# одной точке. Жители домов ежедневно получают почту, которую доставляют роботы-почтальоны. Почта упакована в
# доставочные пакеты, каждый из которых вмещает не более V кг посылок или писем. Каждый доставочный пакет
# используется для доставки почты только в один жилой дом, при этом в каждый дом может быть доставлено не более
# одного пакета с неполной загрузкой. Известно, что заряд аккумулятора робота-почтальона позволяет ему проходить
# не более M км, заряд аккумулятора для возвращения робота в почтовое отделение не учитывается. Почтовое отделение
# открыли в одном из домов таким образом, чтобы количество доставляемых пакетов с корреспонденцией было максимальным.
# В те дома, которые находятся на расстоянии более M км от почтового отделения, почта не доставляется :-(. Определите
# необходимое количество доставочных пакетов в этом почтовом отделении.
# Входные данные. Даны два входных файла (файл A и файл B), каждый из которых в первой строке содержит числа
# N, K, V и M (1 < N ≤ 10 000 000, 1 < K ≤ 10 000 000, 1 < V ≤ 10000, 1 < M ≤ 10 000 000) – количество жилых домов,
# длина кольцевой автодороги в километрах, вместимость пакета (в кг) и максимальное расстояние, на которое робот может
# осуществлять доставку почтовых отправлений. В каждой из следующих N строк находятся два числа: номер километра
# кольцевой автодороги, на котором расположен жилой дом, и вес ежедневной корреспонденции (все числа натуральные,
# вес писем и посылок для каждого дома не превышает 1000 кг). Данные указаны в порядке расположения домов на автодороге.
# Пример входного файла:
# 5 11 3 3
# 1 8
# 3 7
# 5 6
# 7 5
# 9 3
# При таких исходных данных оптимальное расположение почтового отделения – в доме с номером 3. В этом случае количество
# пакетов для доставки корреспонденции составит: 3 (для дома 1) + 3 (для дома 3) + 2 (для дома 5) = 8. В дома 7 и 9
# почту доставить не удаётся. Ответ: 8.
# В ответе укажите два числа: сначала искомое значение для файла А, затем для файла B.
#
# Ответ:

def count_packs(total_w, pack_w):
    return total_w // pack_w + (total_w % pack_w > 0)

with open('27-124a.txt') as f:
    n, k, v, m = tuple(int(x) for x in f.readline().split())
    data = [tuple(int(y) for y in x.split()) for x in f.readlines()]

    houses_count = n
    road_len = k
    pack_max_weight = v
    max_dist = m


    houses = []

    # Сбор и подсчет информации о домах
    for i in range(houses_count):
        packs_count = count_packs(data[i][1], pack_max_weight)
        prev_distance = data[i - 1][0] if i > 0 else 0
        distance = data[i][0] - prev_distance

        houses.append((distance, packs_count))

    cur_dist = 0
    cur_packs_count = 0
    max_packs_needed = 0
    j = 0

    for i in range(len(houses)):
        if cur_dist + houses[i][0] > max_dist:
            max_packs_needed = max(max_packs_needed, cur_packs_count)

        cur_dist += houses[i][0]
        cur_packs_count += houses[i][1]

        while cur_dist > max_dist:
            cur_dist -= houses[j][0]
            cur_packs_count -= houses[j][1]
            j += 1

    max_packs_needed = max(max_packs_needed, cur_packs_count)




    # for i in range(houses):
    #     cur_dist = 0
    #     cur_packs_count = 0
    #     j = i
    #
    #     while cur_dist <= max_dist:
    #         cp = count_packs(data[j][1], pack_max_weight)
    #         cur_packs_count += cp
    #
    #         next_j = j + 1
    #         if j == houses_count - 1:
    #             next_j = 0
    #
    #         cur_dist += data[next_j][0] - data[j][0]
    #
    #         j = next_j
    #
    #
    #     max_packs_needed = max(max_packs_needed, cur_packs_count)

    print(max_packs_needed)

