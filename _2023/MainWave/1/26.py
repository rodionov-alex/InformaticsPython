# Входной файл содержит сведения о заявках на проведение занятий в конференц-зале. В каждой заявке указаны время
# начала и время окончания мероприятия (в минутах от начала суток). Если время начала одного мероприятия меньше
# времени окончания другого, то провести можно только одно из них. Если время окончания одного мероприятия совпадает
# с временем начала другого, то провести можно оба. Определите максимальное количество мероприятий,  которое можно
# провести в конференцзале и самое позднее время окончания последнего мероприятия.
# Входные данные
# В первой строке входного файла находится натуральное число N (N ≤ 1000) – количество заявок на проведение
# мероприятий.
# Следующие N строк содержат пары чисел, обозначающих время начала и время окончания мероприятий. Каждое из чисел
# натуральное, не превосходящее 1440.
# Запишите в ответе два числа: максимальное количество мероприятий, которое можно провести в конференц-зале и самое
# позднее время окончания последнего мероприятия (в минутах от начала суток).
# Типовой пример организации данных во входном файле
# 5
# 10 150
# 100 110
# 131 170
# 131 180
# 120 130
# При таких исходных данных можно провести максимум три мероприятия, например, по заявкам 2, 3 и 5. Конференц-зал
# освободится самое позднее на 180-й минуте, если состоятся мероприятия по заявкам 2, 4, 5.
# Типовой пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемых файлов.
#
# Ответ: 16 1345

with open('26_9756.txt') as f:
    # Данные из файла в виде: (начало_занятия, конец_занятия)
    data = [tuple(map(int, x.split())) for x in f.readlines()[1:]]
    # Сортировка по продолжительности в виде: (время_занятия, (начало_занятия, конец_занятия))
    timed_data = sorted([(x[1] - x[0], x) for x in data])
    # Таймлайн: свободное время - 0, занятое - 1
    timeline = [0] * 1440
    # Количество занятий
    count = 0

    # Распределение занятий по таймлайну
    for lesson in timed_data:
        begin, end = lesson
        # Занятия не должны пересекаться по таймлайну
        # Но могут совпадать начало и конец, поэтому проверка на <= 1. В этом случае в ячейке будет 2.
        if sum(timeline[begin:end + 1]) <= 1:
            for i in range(begin, end + 1):
                timeline[i] += 1
            count += 1

    # Признак того что производится удаление
    deleting = False
    # Убрать последнее занятие на таймлайне
    for i in range(len(timeline) - 1, 0, -1):
        if timeline[i] != 0:
            deleting = True
            timeline[i] -= 1
            # Проверка для случая когла совпадают начало и конец. Если была 2, то останется 1.
            if timeline[i] == 1:
                break
        # Если встретили 0 в процессе удаления - значит дощли до начала последнего занятия, прерваем
        elif deleting:
            break

    # Время окончания последнего занятия
    last_lesson = 0

    # Сортируем все занятия по убыванию по времени окончания.
    # Преребираем полученный список и первое попавшееся занятие, которое можно разместить на таймлайне,
    # и будет занятием с максимальным временем окончания.
    for lesson in sorted(data, reverse=True, key=lambda x: x[1]):
        begin, end = lesson
        # Занятия не должны пересекаться по таймлайну
        if sum(timeline[begin:end + 1]) <= 1:
            last_lesson = end
            break

    print(count, last_lesson)
