# В файле 17-343.txt содержится последовательность целых чисел. Элементы последовательности могут принимать
# целые значения от 0 до 10 000 включительно. Определите количество троек, в которых для каждого числа тройки
# сумма цифр в нечётных разрядах нацело делится на сумму цифр в чётных разрядах. Разряды нумеруются с нуля
# справа налево. В ответе запишите два числа: сначала количество найденных троек, а затем – минимальную сумму
# элементов таких троек. В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
#
# Ответ: 124 4103

# Функция проверки, подходит ли число:
# сумма цифр в нечётных разрядах нацело делится на сумму цифр в чётных разрядах
def is_good(num):
    # Список цифр числа в обратном порядке, так, что теперь индекс в списке соответствует номеру разряда цифры
    digits = [int(x) for x in str(num)[::-1]]
    sum_odd = 0   # Сумма нечетных
    sum_even = 0  # Сумма четных
    # Перебор цифр
    for j in range(len(digits)):
        if j % 2:
            sum_odd += digits[j]
        else:
            sum_even += digits[j]
    # Вернем истину, если делитель не равен нулю и сумма нечётных делится нацело на сумму чётных
    return sum_even != 0 and sum_odd % sum_even == 0


with open('17-343.txt') as f:
    # Список чисел из файла
    nums = [int(x) for x in f.readlines()]
    # В res будем добавлять суммы троек
    res = []
    # Перебор срезами по 3 числа
    for i in range(len(nums) - 2):
        # Тройка чисел
        triple = nums[i:i + 3]
        # С помощью функции проверяем что все 3 числа подходят
        if is_good(triple[0]) and is_good(triple[1]) and is_good(triple[2]):
            # Добавляем сумму тройки в res
            res.append(sum(triple))

    # Вывод количества троек и минимальной суммы
    print(len(res), min(res))
