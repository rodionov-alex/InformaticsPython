# Для экрана размером 10000х10000 пикселей используется цветовая модель RGB. Графический адаптер считывает пиксели
# экрана и записывает в файл данные всех пикселей, кроме тех, для которых установлен белый цвет. Для каждого пикселя
# записывается номер строки, номер позиции в строке и цвет в виде шестнадцатеричного кода (например, #FFFFFF – белый
# цвет). Найдите все пиксели с кодом #00FF00, слева и справа от которых записаны по три подряд идущих пикселя с кодом
# #0000FF. Определите общее количество подходящих пикселей, а также номер строки, в которой есть наибольшее количество
# таких пикселей. Гарантируется, что на экране есть хотя бы один подходящий пиксель.
# Входные данные представлены в файле 26-87.txt следующим образом. В первой строке входного файла записано натуральное
# число N – общее количество записей (1 ≤ N ≤ 100 000). В каждой из следующих N строк находятся два натуральных числа,
# не превышающих 10000, и шестнадцатеричный код, разделённые пробелом: номер строки, номер позиции в строке уникального
# пикселя и цвет пикселя.
# Запишите в ответе два числа: общее количество подходящих пикселей на экране и наибольший номер строки, с максимальным
# количеством подходящих пикселей.
# Пример входного файла::
# 11
# 1 1 #00FF00
# 1 3 #00FF00
# 2 1 #0000FF
# 2 2 #0000FF
# 2 3 #0000FF
# 2 4 #00FF00
# 2 5 #0000FF
# 2 6 #0000FF
# 2 7 #0000FF
# 3 3 #00FF00
# 3 5 #00FF00
# В данном случае есть один подходящий пиксель (строка 2, позиция 4) с кодом цвета #00FF00, окруженный с двух сторон
# тройками пикселей с кодом #0000FF. Ответ: 1 2.
#
# Ответ: 210000 0

with open('26-87.txt') as f:
    k = 10000
    n = int(f.readline())
    data = []

    for i in range(n):
        row, col, color = f.readline().split()
        pixel = (int(row), int(col), int(color[1:], 16))
        data.append(pixel)

    data.sort()

    target = int('00FF00', 16)
    bound = int('0000FF', 16)

    print(data)

    count = 0
    mx = 0
    mx_row = 0
    prev_row = 0

    for d in data:
        row, col, color = d



    print(count, mx_row)






