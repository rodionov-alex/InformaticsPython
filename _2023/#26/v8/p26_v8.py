# В терминологии сетей TCP/IP IP-адресом называют 32-битную последовательность, позволяющую однозначно определить
# подключенное к сети устройство, маской сети называют 32-битное двоичное число, которое показывает, какая часть
# IP-адреса относится к адресу сети, а какая – к адресу узла в этой сети. Адрес сети получается в результате
# применения поразрядной конъюнкции к заданному адресу узла и его маске. Например, при IP-адресе 174.23.88.201 и
# маске 255.255.192.0 адрес сети будет равен 174.23.64.0, адрес узла в этой сети – 6345.
# Журнал обращений к серверу содержит IP-адреса, с которых были получены запросы. Известно, что маска у всех сетей
# равна 255.255.224.0. Определите адрес сети, из которой пришло наибольшее количество запросов. Для этой сети
# определите количество узлов, отправлявших запросы.
# Входные данные представлены в файле 26-88.txt следующим образом. В первой строке входного файла записано
# натуральное число N – общее количество обращений к серверу (1 ≤ N ≤ 100 000). В каждой из следующих N строк
# находится IP-адрес – четыре числа в диапазоне [0; 255], разделенные точками.
# Запишите в ответе два числа: адрес сети, из которой отправлено максимальное количество запросов, и количество
# различных узлов этой сети, которые отправляли запросы. Если таких сетей несколько, выберите сеть с наименьшим
# IP-адресом. В записи IP-адреса точки не указывайте.
# Пример входного файла::
# 3
# 125.10.13.14
# 125.10.13.20
# 125.10.45.14
# В данном случае первые два запроса пришли из сети 125.10.0.0, а один последний – из сети 125.10.32.0.
# Ответ: 1251000 2.
#
# Ответ: 28130320 22

# Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и его маске
def get_adress(ip, msk):
    if len(ip) == len(msk) == 4:
        return tuple(ip[i] & msk[i] for i in range(4))
    else:
        return 0, 0, 0, 0


with open('26-88.txt') as f:
    # Список ip-адресов
    data = [tuple(map(int, x.split('.'))) for x in f.readlines()[1:]]
    # Маска сети
    mask = (255, 255, 224, 0)
    # Словарь адресов сети
    adress_dic = {}
    # Распределение ip-адресов по адресам сети
    for d in data:
        adress = get_adress(d, mask)

        if adress in adress_dic.keys():
            adress_dic[adress].append(d)
        else:
            adress_dic[adress] = [d]

    # Адреса сети, из которой отправлено максимальное количество запросов
    adress_max_call = {}
    # Максимальное количество запросов
    max_call_count = 0
    # Наполнение max_adress
    for k in adress_dic.keys():
        count = len(adress_dic[k])  # количество запросов по адресу сети

        # Если больше, то обновить максимум
        if count > max_call_count:
            max_call_count = count
            adress_max_call = {k: adress_dic[k]}
        # Если равно, то добавить к имеющимся
        elif count == max_call_count:
            adress_max_call[k] = adress_dic[k]

    # Минимальный адрес сети среди адресов сети, из которой отправлено максимальное количество запросов
    min_adress = min(adress_max_call.keys())
    # Вывод минимального адреса сети и количества различных ip-адресов
    print(''.join(tuple(str(x) for x in min_adress)), len(set(adress_max_call[min_adress])))
