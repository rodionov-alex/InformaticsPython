# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# - символ «?» означает ровно одну произвольную цифру;
# - символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и
# пустую последовательность.
# Например, маске 123*4?5 соответствуют числа 123405 и 12300405. Среди натуральных чисел, не превышающих 10^7,
# найдите все числа, соответствующие маске 3*52?, у которых нечётное количество делителей. В ответе запишите
# в первом столбце таблицы все найденные числа в порядке возрастания, а во втором столбце – соответствующие им
# максимальные делители, не считая самого числа.
#
# Ответ: 3143529 1047843
#        3175524 1587762
#        3200521 1789
#        3845521 103933
#        3908529 1302843

# Максимальный делитель числа
def max_div(n):
    for d in range(2, int(n ** 0.5) + 1):
        if n % d == 0:
            return n // d

    return 0

# region Old
from itertools import product

mask = '3{0}52{1}'  # 3*52?
res = []

# Перебор цифр для *
for ncount in range(4):  # от 0 до 3 цифр на месте звездочки поскольку максимум 10 000 000
    # Все возможные сочетания цифр длиной ncount
    stars = list(product('0123456789', repeat=ncount))
    # Перебор сочетаний, где star - это кортеж из цифр
    for star in stars:
        # Перебор цифр для ?
        for question in '0123456789':
            num = int(mask.format(''.join(star), question))
            # Нечетное количество делителей может быть только если квадратный корень - это целое число
            if num ** 0.5 % 1 == 0:
                res.append((num, max_div(num)))

# Вывод результата в порядке возрастания
for r in sorted(res):
    print(*r)
# endregion

# region Regular expressions
import re

res = []

for n in range(1, 10 ** 7 + 1):
    # Нечетное количество делителей может быть только если квадратный корень - это целое число
    if re.fullmatch('3\d*52\d', str(n)) is not None and n ** 0.5 % 1 == 0:
        res.append((n, max_div(n)))

for r in sorted(res):
    print(*r)
# endregion
