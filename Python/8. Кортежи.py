import timeit

print('-=-=-= КОРТЕЖИ =-=-=-')

# Кортеж, по сути - неизменяемый список.

a = tuple()     # Пустой кортеж
a = ()          # Пустой кортеж
b = (1, 2, 3)   # Кортеж b, проинициализированный элементами 1, 2, 3
print('a =', a)
print('b =', b)
print()

# Неизменяемость — именно это свойство кортежей, порой, может выгодно отличать их от списков.
#
# Скорость — кортежи быстрее работают. По причине неизменяемости кортежи хранятся в памяти особым образом,
#            поэтому операции с их элементами выполняются заведомо быстрее, чем с компонентами списка.
#
# Безопасность — неизменяемость также позволяет им быть идеальными кандидатами на роль констант. Константы,
#                заданные кортежами, позволяют сделать код более читаемым и безопасным.
#
# Использование в других структурах данных — кортежи применимы в отдельных структурах данных, от которых python
#                                            требует неизменяемых значений, например ключи словарей (dicts).

# Так же, стоит отметить, что кортежи имеют меньший вес
a = (1, 2, 3, 4, 5, 6)
b = [1, 2, 3, 4, 5, 6]
print('a = (1, 2, 3, 4, 5, 6), имеет размер', a.__sizeof__())
print('b = [1, 2, 3, 4, 5, 6], имеет размер', b.__sizeof__())
# и соответственно быстрее создаются
print('a = (1, 2, 3, 4, 5, 6) создается за', timeit.timeit('a = (1, 2, 3, 4, 5, 6)', number=1000000))
print('b = [1, 2, 3, 4, 5, 6] создается за', timeit.timeit('b = [1, 2, 3, 4, 5, 6]', number=1000000))
print()

# Операции с кортежами
# Все операции над списками, не изменяющие список: сложение, умножение на число, методы index() и count() и
# некоторые другие операции. Можно также по-разному менять элементы местами. Например, гордость
# программистов на python - поменять местами значения двух переменных:
a = 5
b = 10
print('a =', a, 'b =', b)
a, b = b, a
print('a =', a, 'b =', b) 
